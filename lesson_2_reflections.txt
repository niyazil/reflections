What happens when you initialize a repository? Why do you need to do it?
After intializing a repository, a hidden .git folder is created in the
directory. It is needed to store the history of commits of the 
repository.

How is the staging area different from the working directory and the
repository? What value do you think it offers?
The staging area contains only the files you wish to commit. It allows
more control over version control, as you decide which files are saved.

How can you use the staging area to make sure you have one commit per
logical change?
You are not required to commit changes to all files at once. You can
select which files you want to include in a particular commit.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?
Branches would be useful when adding experimental features or new
languages to the code.They would help by making the different version
separate and easily accesible. 

How do the diagrams help you visualize the branch structure?
The diagrams allow me to more easily identify the master and other
branches, unreachable commits, and where branches split off from
eachother.

What is the result of merging two branches together? Why do we represent
it in the diagram the way we do?
Merging two branches together creates a new commit combining commits
from both branches based on the commit from which they both diverge. It
is represented this way to show that changes are merged from other 
branches into the master branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing
merges manually?
Automatic merging is fast and convenient but should not always be used 
in ambiguous situations. In those situation, the merging should be 
manual so that the user has more control over which changes should be merged.
